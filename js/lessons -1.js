// + * Перетворення типів: числа
// - Явне перетворення типів
// - Неявне перетворення типів
//
// -------------------
// console.log("5");

// тип даних string
// В JavaScript текст, укладений у лапки (подвійні " " або одинарні ' '),
// розглядається як рядок.Хоча "5" виглядає як число, воно є рядком через лапки.

// -------------------
// console.log(Number("5"));

// тип даних Number
// Функція Number() перетворює рядок "5" на числове значення 5.

// -------------------
// console.log(true);

// тип даних boolean
// виведе в консоль значення true, яке є типом даних boolean.

// -------------------
// console.log(Number(null));

// тип даних number
// У JavaScript, при перетворенні null на число, результатом буде 0.
// Це відбувається тому, що null при конвертації в числовий тип перетворюється саме в 0.

// -------------------
// console.log(Number(undefined));

// тип даних number
// NaN(Not - a - Number) — це спеціальне числове значення в JavaScript, яке означає, що результат обчислення не є числом.
// У цьому випадку undefined не може бути перетворено на коректне число, тому результатом буде NaN.

// -------------------
// console.log(Number("Alice"));

// NaN(Not - a - Number) означає, що перетворення рядка "Alice" на число не вдалося,
//     оскільки "Alice" не є числом.

// -------------------
// console.log(Number"25px");

// Функція Number() не може коректно перетворити рядок "25px" на число, оскільки рядок містить не лише цифри, а й літери.
// Результатом такого перетворення буде NaN(Not - a - Number).

// -------------------
// *Неявне перетворення типів

// console.log("5" * 2);
// console.log("5" - 2);
// console.log("5" % 2);

// В JavaScript, коли оператор множення (*) використовується з рядком і числом, JavaScript намагається перетворити рядок у число, щоб виконати операцію.
// Рядок "5" буде перетворено на число 5.
// Операція 5 * 2 виконується як звичайне множення чисел.

// -------------------
// console.log(5 + true);

// У JavaScript оператор + використовується для двох основних операцій: додавання чисел та конкатенації рядків.
// Коли один з операндів є числом, а інший — булевим значенням (true або false), JavaScript автоматично перетворює булеве значення в число:
// true перетворюється в 1
// false перетворюється в 0
// Отже, вираз 5 + true еквівалентний 5 + 1, що дорівнює 6.

// -------------------
// console.log(5 > 6);

// Вираз 5 > 6 перевіряє, чи є число 5 більшим ніж число 6.
// Операція > (більше) повертає булеве значення (true або false) в залежності від того, чи є перше число більшим ніж друге.
// У цьому випадку 5 не більше ніж 6, тому вираз повертає false.

// -------------------
// console.log(10 >= "7");

// Оператор >= (більше або дорівнює) порівнює два значення, щоб перевірити, чи є перше значення більшим або рівним другому.
// У JavaScript, якщо один з операндів є числом, а інший — рядком, JavaScript автоматично перетворює рядок у число для виконання порівняння.
// Рядок "7" буде перетворено на число 7.
// Тепер порівнюються числа 10 і 7: 10 >= 7, що є true.

// -------------------
// console.log("2" > "12");

// Коли порівнюються два рядки, JavaScript порівнює їх символи за їхніми кодами Unicode.
// В цьому випадку порівнюються рядки "2" і "12".
// Порівняння рядків виконується за першим символом кожного рядка. Якщо перший символ одного рядка більший за перший символ іншого, то рядок вважається більшим.
// Символ "2" (код Unicode 50) більший за символ "1" (код Unicode 49).
// є true.

// -------------------
// console.log("4" == 4);

// Оператор == (нестроге порівняння) порівнює два значення і автоматично перетворює їх до одного типу даних, якщо вони різні.
// У цьому випадку один з операндів є рядком ("4"), а інший — числом (4).
// JavaScript перетворює рядок "4" на число 4 для виконання порівняння.
// Після перетворення, вираз 4 == 4 повертає true.
// Отже, результатом буде true.

// -------------------
// console.log("6" === 6);

// Оператор === (строге порівняння) перевіряє рівність двох значень, не лише за значенням, але і за типом даних.
// У цьому випадку один з операндів є рядком ("6"), а інший — числом (6).
// Оператор === не виконує автоматичне перетворення типів. Це означає, що === порівнює значення та їхні типи даних.
// Оскільки тип рядка ("6") відрізняється від типу числа (6), порівняння повертає false.
// Отже, результатом буде false.

// -------------------
// console.log(1 == true);

// Оператор == (нестроге порівняння) перевіряє рівність двох значень, при цьому автоматично перетворює типи даних при необхідності.
// У цьому випадку один з операндів є числом (1), а інший — булевим значенням (true).
// Булеве значення true автоматично перетворюється в число 1 для виконання порівняння.
// Тепер порівнюються 1 і 1, що є true.
// Отже, результатом буде true.

// -------------------
// console.log(1 === true);

// Оператор === (строге порівняння) перевіряє рівність двох значень і їх типів даних без автоматичного перетворення типів.
// У цьому випадку один з операндів є числом (1), а інший — булевим значенням (true).
// Оператор === перевіряє, чи є обидва значення однаковими і чи мають один і той же тип.
// Тип 1 є числом, а тип true є булевим значенням. Оскільки типи даних не збігаються, порівняння повертає false.
// Отже, результатом буде false.

// -------------------
// console.log("0" == true);

// Оператор == (нестроге порівняння) виконує автоматичне перетворення типів перед порівнянням.
// У цьому випадку один з операндів є рядком ("0"), а інший — булевим значенням (true).
// При порівнянні рядка "0" і булевого значення true, JavaScript спочатку намагається перетворити рядок в число.
// Рядок "0" перетворюється на число 0. Булеве значення true перетворюється в 1 при числовому порівнянні.
// Тепер ми порівнюємо 0 і 1, що є false.
// Отже, результатом буде false.

// -------------------
// console.log("Alice" < "alice");

// В JavaScript порівняння рядків виконується на основі їхніх кодів Unicode.
// Великі літери мають менші коди Unicode ніж малі літери. Наприклад, код Unicode для "A" (велика літера) є 65, а для "a" (мала літера) — 97.
// Коли порівнюються рядки, JavaScript порівнює їх символи по порядку.
// Оскільки "Alice" починається з "A", а "alice" починається з "a", і код "A" менший ніж код "a", "Alice" вважається меншим за "alice".
// Отже, результатом буде true.

// -------------------
// console.log(undefined == null);

// Оператор == (нестроге порівняння) виконує автоматичне перетворення типів даних перед порівнянням.
// У JavaScript, спеціальні значення undefined і null вважаються рівними один одному при нестрогому порівнянні (==).
// Це специфічна особливість JavaScript: undefined і null розглядаються як рівні, але ні undefined, ні null не рівні жодному іншому значенню (крім один одного).
// Отже, результатом буде true.

// ---------Арефметичні функції-------

// Number.parseInt
// Number.parseFloat
// Math

// -------------------
// console.log(Number("12px"));

// Функція Number() намагається перетворити рядок в число.
// Якщо рядок містить символи, які не є частиною числового значення(у цьому випадку "px"),
// Number() не може коректно перетворити рядок і повертає NaN(Not - a - Number).
// У JavaScript NaN означає, що результат перетворення не є числом.
//     Тобто, оскільки "12px" не є чистим числовим рядком, функція Number()
// не може його перетворити і результатом буде NaN.

// *
// let width = "12px"
// width = Number.parseInt(width);

// console.log(width);

// Функція Number.parseInt() (або просто parseInt()) перетворює рядок в ціле число.
// Вона ігнорує всі символи, що не є частиною числа, після числової частини рядка.

// parseInt("12px") обробляє рядок "12px" і видаляє символи "px", залишаючи тільки "12".
// Результатом є ціле число 12.

// *
// let height = "20.5px";
// height = Number.parseFloat(height);

// console.log(height);

// Функція Number.parseFloat() (або просто parseFloat()) перетворює рядок,
// що представляє десяткове число, в число типу float.

// parseFloat("20.5px") обробляє рядок "20.5px" і видаляє символи після числової частини рядка,
// зберігаючи тільки "20.5".
// Функція parseFloat() повертає число 20.5.
// Тобто, parseFloat() ігнорує нечислові символи після першої частини рядка, яка є числом,
// і повертає числове значення.
// Виводить значення height, яке тепер є числом 20.5.

// * ------Math-------

// const value = 27.3;

// console.log(Math.floor(value));

// Функція Math.floor() округлює число до найближчого меншого цілого числа.
// У цьому випадку Math.floor(27.3) округлює 27.3 до 27, оскільки Math.floor() завжди округлює вниз,
// незалежно від дробової частини числа.
// Виводить результат функції Math.floor(), який є 27.

// * Функції

// Оголошення та виклик Функції
// Параметри та аргументи
// Повернення значення

// function add() {
//   console.log("lalala");
// }

// add();

// Функція add оголошена з використанням ключового слова function.
// Всередині функції виконується команда console.log("lalala"),
// яка виводить рядок "lalala" у консоль.
// Після оголошення функції add, її викликають за допомогою add().
// Коли функція викликається, вона виконує код всередині свого тіла.
// У цьому випадку це console.log("lalala"), який виводить "lalala" у консоль.
// Отже, при виклику функції add(), виведеться рядок "lalala", який буде видно в консолі.

// -------------------
// function add(x, y) {
//   const dayTotal = x * 8 * 1.2;
//   const total = dayTotal * y;
//   return total;
// }

// const petya = add(20, 20);
// const katya = add(20, 15);
// const yura = add(17, 21);

// console.log("petya", petya);
// console.log("katya", katya);
// console.log("yura", yura);

// Умова задачі:
// Напишіть функцію add(x, y), яка обчислює загальну кількість робочих годин для
// заданої кількості робочих днів і кількості робочих днів на місяць для різних
// працівників, з урахуванням додаткового коефіцієнта продуктивності.Функція
// повинна приймати два аргументи:

// x - кількість годин роботи в день;
// y - кількість робочих днів.
// Функція повинна повертати загальну кількість годин, яку працівник відпрацював
// за місяць з урахуванням коефіцієнта продуктивності, який дорівнює 1.2.

// Використовуйте функцію для обчислення загальної кількості робочих годин для
// кожного з трьох працівників: Петі, Каті та Юри, і виведіть результат у консоль.

// Пояснення:
// Функція add(x, y) спочатку обчислює кількість годин, яку працівник працює за
// один день з урахуванням додаткового коефіцієнта продуктивності(dayTotal = x * 8 * 1.2).
// Цей коефіцієнт означає, що ефективність працівника збільшується на 20 %, і відповідно,
// фактично відпрацьовані години множаться на 1.2.Потім ця кількість годин множиться на
// кількість робочих днів y, щоб отримати загальну кількість робочих годин за
// місяць(total = dayTotal * y).

// У прикладі:
// Петя працює 20 годин на день протягом 20 днів, тому його загальна кількість робочих
// годин за місяць складає 20 * 8 * 1.2 * 20.
// Катя працює 20 годин на день протягом 15 днів, тому її загальна кількість робочих
// годин за місяць складає 20 * 8 * 1.2 * 15.
// Юра працює 17 годин на день протягом 21 дня, тому його загальна кількість робочих
// годин за місяць складає 17 * 8 * 1.2 * 21.
// Результати обчислень виводяться у консоль для кожного працівника.

// -------------------Область видимості функції-------------

const str = "Hello";

console.log(str);

// function foo() {
//   console.log(str);
// }

// foo();
